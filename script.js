
import { initializeApp } from "https://www.gstatic.com/firebasejs/12.3.0/firebase-app.js";
import { getDatabase, ref, push, onChildAdded, off } from "https://www.gstatic.com/firebasejs/12.3.0/firebase-database.js";
import { getAuth, signInWithEmailAndPassword, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/12.3.0/firebase-auth.js";



const firebaseConfig = {
    apiKey: "AIzaSyBC_zaWKozAN4gaRGFQs8Yfg6sSLjWczag", // <--- KH√ìA C·ª¶A B·∫†N
    authDomain: "webchatapp-e6e15.firebaseapp.com",
    databaseURL: "https://webchatapp-e6e15-default-rtdb.firebaseio.com",
    projectId: "webchatapp-e6e15",
    storageBucket: "webchatapp-e6e15.firebasestorage.app",
    messagingSenderId: "395339001651",
    appId: "1:395339001651:web:e514a3b180ad92429b5846"
};


const app = initializeApp(firebaseConfig);
const database = getDatabase(app);
const auth = getAuth(app);

let currentChatRef = null;
let messageListener = null;
let isRoomJoined = false; // TR·∫†NG TH√ÅI M·ªöI: ƒê√£ tham gia ph√≤ng ch∆∞a

// =============================
// B∆Ø·ªöC 2: DOM Elements
// =============================
// Chat Elements
const messageInput = document.getElementById('message-input');
const usernameInput = document.getElementById('username');
const sendButton = document.getElementById('send-button');
const messagesContainer = document.getElementById('messages');
const chatScreen = document.getElementById('chat-screen');
const logoutButton = document.getElementById('logout-button');
const headerText = document.getElementById('header-text');

// Room ID Element M·ªöI
const roomIdInput = document.getElementById('room-id-input');
const roomActionButton = document.getElementById('room-action-button'); // N√öT CHUY·ªÇN ƒê·ªîI

// Login Elements
const loginScreen = document.getElementById('login-screen');
const loginEmailInput = document.getElementById('login-email');
const loginPasswordInput = document.getElementById('login-password');
const loginButton = document.getElementById('login-button');
const loginErrorText = document.getElementById('login-error');

// L∆∞u username v√† Room ID v√†o localStorage
usernameInput.value = localStorage.getItem('chatUsername') || '';
roomIdInput.value = localStorage.getItem('chatRoomId') || ''; // B·ªè default room

usernameInput.addEventListener('change', () => {
    localStorage.setItem('chatUsername', usernameInput.value.trim());
});
roomIdInput.addEventListener('input', updateRoomUI); // C·∫≠p nh·∫≠t UI ngay khi g√µ

// =============================
// B∆Ø·ªöC 3: Logic ƒêƒÉng nh·∫≠p/ƒêƒÉng xu·∫•t (Gi·ªØ nguy√™n)
// =============================
function handleAuthStateChange(user) {
    if (user) {
        loginScreen.classList.add('hidden');
        chatScreen.classList.remove('hidden');
        headerText.textContent = `üí¨ Chat v·ªõi ${user.email}`;
        updateRoomUI(); // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng khi ƒëƒÉng nh·∫≠p
    } else {
        chatScreen.classList.add('hidden');
        loginScreen.classList.remove('hidden');
        headerText.textContent = `üí¨ ƒêƒÉng nh·∫≠p ƒë·ªÉ Chat`;
    }
}

async function handleLogin() {
    // ... (Gi·ªØ nguy√™n logic Login)
    const email = loginEmailInput.value.trim();
    const password = loginPasswordInput.value.trim();
    loginErrorText.classList.add('hidden');

    try {
        await signInWithEmailAndPassword(auth, email, password);
    } catch (error) {
        let errorMessage = "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra Email/M·∫≠t kh·∫©u.";
        if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password') {
            errorMessage = "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.";
        }
        loginErrorText.textContent = errorMessage;
        loginErrorText.classList.remove('hidden');
    }
}

async function handleLogout() {
    // ... (Gi·ªØ nguy√™n logic Logout)
    try {
        // Tho√°t ph√≤ng tr∆∞·ªõc khi ƒëƒÉng xu·∫•t
        leaveRoom();
        await signOut(auth);
    } catch (error) {
        console.error("Logout Error:", error);
    }
}

// =============================
// B∆Ø·ªöC 4: Logic Qu·∫£n l√Ω Ph√≤ng
// =============================

/**
 * C·∫≠p nh·∫≠t giao di·ªán v√† tr·∫°ng th√°i c√°c n√∫t d·ª±a tr√™n Room ID
 */
function updateRoomUI() {
    const roomId = roomIdInput.value.trim();

    // N·∫øu ch∆∞a tham gia ph√≤ng
    if (!isRoomJoined) {
        // Cho ph√©p nh·∫≠p Room ID
        roomIdInput.disabled = false;

        // Hi·ªÉn th·ªã n√∫t V√ÄO PH√íNG
        roomActionButton.textContent = 'V√ÄO PH√íNG';
        roomActionButton.classList.remove('bg-red-600', 'hover:bg-red-700');
        roomActionButton.classList.add('bg-purple-600', 'hover:bg-purple-700');

        // V√¥ hi·ªáu h√≥a controls chat n·∫øu ch∆∞a nh·∫≠p Room ID
        const canJoin = roomId !== '' && usernameInput.value.trim() !== '';
        roomActionButton.disabled = !canJoin;

        messageInput.disabled = true;
        sendButton.disabled = true;

        if (messagesContainer.innerHTML === '') {
            messagesContainer.innerHTML = '<p class="text-center text-muted p-4">Nh·∫≠p ID ph√≤ng chat v√† nh·∫•n "V√ÄO PH√íNG" ƒë·ªÉ xem l·ªãch s·ª≠.</p>';
        }

    } else {
        // ƒê√£ tham gia ph√≤ng
        roomIdInput.disabled = true;

        // Hi·ªÉn th·ªã n√∫t THO√ÅT PH√íNG
        roomActionButton.textContent = 'THO√ÅT PH√íNG';
        roomActionButton.classList.remove('bg-purple-600', 'hover:bg-purple-700');
        roomActionButton.classList.add('bg-red-600', 'hover:bg-red-700');
        roomActionButton.disabled = false;

        // K√≠ch ho·∫°t controls chat
        messageInput.disabled = false;
        sendButton.disabled = false;

        // T√™n ph√≤ng hi·ªÉn th·ªã tr√™n header (d√π ƒë√£ c√≥ email)
        headerText.textContent = `üí¨ Ph√≤ng: ${roomId}`;
    }
}


/**
 * Tham gia ph√≤ng chat
 */
function joinRoom() {
    const roomId = roomIdInput.value.trim();
    if (roomId === '') return;

    // L∆∞u Room ID
    localStorage.setItem('chatRoomId', roomId);

    // 1. D·ª´ng l·∫Øng nghe ph√≤ng chat c≈© (n·∫øu c√≥)
    if (currentChatRef && messageListener) {
        off(currentChatRef, 'child_added', messageListener);
    }

    // 2. Thi·∫øt l·∫≠p tham chi·∫øu m·ªõi
    currentChatRef = ref(database, `messages/${roomId}`);

    // 3. X√≥a tin nh·∫Øn c≈© kh·ªèi giao di·ªán (ƒë·ªÉ t·∫£i tin nh·∫Øn ph√≤ng m·ªõi)
    messagesContainer.innerHTML = '';

    // 4. L·∫Øng nghe tin nh·∫Øn m·ªõi v√† l∆∞u h√†m h·ªßy l·∫Øng nghe
    messageListener = onChildAdded(currentChatRef, (snapshot) => {
        displayMessage(snapshot.val());
    });

    isRoomJoined = true;
    updateRoomUI();
    messageInput.focus();
}

/**
 * Tho√°t ph√≤ng chat
 */
function leaveRoom() {
    // D·ª´ng l·∫Øng nghe ph√≤ng chat hi·ªán t·∫°i
    if (currentChatRef && messageListener) {
        off(currentChatRef, 'child_added', messageListener);
    }
    currentChatRef = null;
    messageListener = null;

    // X√≥a l·ªãch s·ª≠ chat kh·ªèi giao di·ªán
    messagesContainer.innerHTML = '<p class="text-center text-muted p-4">B·∫°n ƒë√£ tho√°t ph√≤ng chat.</p>';

    isRoomJoined = false;
    updateRoomUI();
}

// H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t V√ÄO/THO√ÅT
function handleRoomAction() {
    if (isRoomJoined) {
        leaveRoom();
    } else {
        joinRoom();
    }
}

// =============================
// B∆Ø·ªöC 5: Logic G·ª≠i Tin nh·∫Øn (ƒê√£ ƒëi·ªÅu ch·ªânh)
// =============================
async function sendMessage() {
    // ... (Gi·ªØ nguy√™n logic sendMessage)
    const username = usernameInput.value.trim();
    const message = messageInput.value.trim();

    if (username === '' || message === '' || !isRoomJoined) {
        alert("Vui l√≤ng nh·∫≠p T√™n v√† tin nh·∫Øn, v√† ph·∫£i tham gia ph√≤ng.");
        return;
    }

    const newMessage = {
        username: username,
        text: message,
        timestamp: Date.now()
    };

    try {
        if (currentChatRef) {
            await push(currentChatRef, newMessage);
            messageInput.value = '';
        }
    } catch (error) {
        console.error("L·ªói khi g·ª≠i tin nh·∫Øn:", error);
        alert("Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Ki·ªÉm tra k·∫øt n·ªëi.");
    }
}

// ... (Gi·ªØ nguy√™n logic displayMessage)
function displayMessage(messageData) {
    const messageElement = document.createElement('div');
    const currentUsername = usernameInput.value.trim();
    const isMyMessage = messageData.username === currentUsername && currentUsername !== '';

    const baseClass = "p-3 rounded-xl shadow-md max-w-[80%] ";
    const messageClasses = isMyMessage
        ? baseClass + "bg-indigo-600 text-white"
        : baseClass + "bg-white text-gray-800 border border-gray-200";

    messageElement.className = isMyMessage ? "flex justify-end mb-3" : "flex justify-start mb-3";

    messageElement.innerHTML = `
      <div class="${messageClasses}">
        <span class="font-semibold text-sm ${isMyMessage ? 'text-indigo-200' : 'text-indigo-700'}">${messageData.username}</span><br>
        ${messageData.text}
        <div class="text-xs ${isMyMessage ? 'text-indigo-300' : 'text-gray-500'} mt-1 text-right">${new Date(messageData.timestamp).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })}</div>
      </div>
    `;

    messagesContainer.appendChild(messageElement);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}


// =============================
// B∆Ø·ªöC 6: L·∫Øng nghe s·ª± ki·ªán
// =============================

onAuthStateChanged(auth, handleAuthStateChange);
loginButton.addEventListener('click', handleLogin);
loginPasswordInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') handleLogin();
});
logoutButton.addEventListener('click', handleLogout);

// L·∫Øng nghe s·ª± ki·ªán ROOM ACTION M·ªöI
roomActionButton.addEventListener('click', handleRoomAction);
roomIdInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !isRoomJoined) {
        handleRoomAction();
    }
});

sendButton.addEventListener('click', sendMessage);
messageInput.addEventListener('keypress', function (e) {
    if (e.key === 'Enter') sendMessage();
});